{"version":3,"sources":["Pieces/Sphere.jsx","Pieces.js","Pieces/Tetrahedron.jsx","Pieces/Pyramid.jsx","Pieces/Cube.jsx","PrometheusSquare.jsx","Players.js","utils.js","PrometheusBoard.jsx","InitialGameState.js","App.js","reportWebVitals.js","index.js"],"names":["Sphere","colour","className","Pieces","BLACK_SPHERE","BLACK_TETRAHEDRON","BLACK_PYRAMID","BLACK_CUBE","WHITE_SPHERE","WHITE_TETRAHEDRON","WHITE_PYRAMID","WHITE_CUBE","Tetrahedron","fillColour","strokeColour","viewBox","d","fill","stroke","strokeWidth","x1","y1","x2","y2","Pyramid","x","y","width","height","Cube","renderPiece","piece","PrometheusSquare","selected","valid","onClick","Players","PLAYER_ONE","PLAYER_TWO","addValidMoves","movement","validMoves","gameState","playerOneFirstTurn","playerTwoFirstTurn","isPlayerPiece","push","isArrayInArray","arr","item","item_as_string","JSON","stringify","some","ele","movementSpeed","isUpper","str","test","str1","str2","PrometheusBoard","inProgress","setInProgress","playerOneSpherePlaced","playerTwoSpherePlaced","setPlayerOneSpherePlaced","setPlayerTwoSpherePlaced","setGameState","turn","setTurn","setWinner","useState","originRank","setOriginRank","originFile","setOriginFile","setPlayerOneFirstTurn","setPlayerTwoFirstTurn","setValidMoves","useEffect","addPlayerOneSphere","rank","file","selectedSquare","toUpperCase","tmp","addPlayerTwoSphere","toLowerCase","selectCandidatePiece","candidatePiece","calculateValidMoves","clearCandidatePiece","movePiece","destinationRank","destinationFile","Array","map","el","id","InitialGameState","App","parse","winner","inProgressWithSpheresPlaced","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b42e2f34.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Sphere = ({colour}) => {\n  return (\n    <div className={`sphere sphere-${colour}`} />\n  )\n};\n\nexport default Sphere;\n","const Pieces = {\n  BLACK_SPHERE: \"s\",\n  BLACK_TETRAHEDRON: \"t\",\n  BLACK_PYRAMID: \"p\",\n  BLACK_CUBE: \"c\",\n  WHITE_SPHERE: \"S\",\n  WHITE_TETRAHEDRON: \"T\",\n  WHITE_PYRAMID: \"P\",\n  WHITE_CUBE: \"C\",\n}\n\nexport default Pieces;\n","import React from \"react\";\n\nconst Tetrahedron = ({colour}) => {\n  const fillColour = colour === \"black\" ? \"black\" : \"whitesmoke\";\n  const strokeColour = \"#d4af37\";\n\n  return (\n    <div className=\"tetrahedron\">\n      <svg viewBox=\"0 -5 100 100\">\n        <path d=\"M2.70666 86.0876L50.9746 2.48511L99.2426 86.0876H2.70666Z\" fill={fillColour} stroke={strokeColour} strokeWidth=\"3\"/>\n        <path d=\"M50.9746 54.0695L47.4746 60.1316H54.4746L50.9746 54.0695Z\" fill={strokeColour} />\n        <line x1=\"2.49072\" y1=\"86.2194\" x2=\"45.792\" y2=\"61.2194\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"56.1626\" y1=\"61.2167\" x2=\"99.4639\" y2=\"86.2167\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"50.9771\" y1=\"52.2212\" x2=\"50.9771\" y2=\"2.22119\" stroke={strokeColour} strokeWidth=\"3\"/>\n      </svg>\n    </div>\n  )\n};\n\nexport default Tetrahedron;\n","import React from 'react';\n\nconst Pyramid = ({colour}) => {\n  const fillColour = colour === \"black\" ? \"black\" : \"whitesmoke\";\n  const strokeColour = \"#d4af37\";\n\n  return (\n    <div className=\"pyramid\">\n      <svg viewBox=\"0 0 101 101\">\n        <rect x=\"1.4624\" y=\"1.5033\" width=\"98\" height=\"98\" fill={fillColour} stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"54.5015\" y1=\"54.5101\" x2=\"99.7564\" y2=\"99.7649\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"1.16902\" y1=\"1.21184\" x2=\"46.4239\" y2=\"46.4667\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"46.4337\" y1=\"54.5455\" x2=\"1.17884\" y2=\"99.8003\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <line x1=\"99.755\" y1=\"1.20991\" x2=\"54.5001\" y2=\"46.4647\" stroke={strokeColour} strokeWidth=\"3\"/>\n        <rect x=\"47.4624\" y=\"47.5033\" width=\"6\" height=\"6\" fill={strokeColour}/>\n      </svg>\n    </div>\n  )\n};\n\nexport default Pyramid;\n","import React from 'react';\n\nconst Cube = ({colour}) => {\n  const fillColour = colour === \"black\" ? \"black\" : \"whitesmoke\";\n  const strokeColour = \"#d4af37\";\n\n  return (\n    <div className=\"cube\">\n      <svg viewBox=\"0 0 100 100\">\n        <rect height=\"100\" width=\"100\" y=\"0\" x=\"0\" fill={fillColour} stroke={strokeColour} strokeWidth=\"5\" />\n      </svg>\n    </div>\n  )\n};\n\nexport default Cube;\n","import React from 'react';\nimport Sphere from \"./Pieces/Sphere\";\nimport Pieces from \"./Pieces\";\nimport Tetrahedron from \"./Pieces/Tetrahedron\";\nimport Pyramid from \"./Pieces/Pyramid\";\nimport Cube from \"./Pieces/Cube\";\n\nconst renderPiece = (piece) => {\n  switch(piece) {\n    case Pieces.WHITE_SPHERE:\n      return (\n        <Sphere colour=\"white\" />\n      );\n    case Pieces.BLACK_SPHERE:\n      return (\n        <Sphere colour=\"black\" />\n      );\n    case Pieces.WHITE_TETRAHEDRON:\n      return (\n        <Tetrahedron colour=\"white\" />\n      );\n    case Pieces.BLACK_TETRAHEDRON:\n      return (\n        <Tetrahedron colour=\"black\" />\n      );\n    case Pieces.WHITE_PYRAMID:\n      return (\n        <Pyramid colour=\"white\" />\n      );\n    case Pieces.BLACK_PYRAMID:\n      return (\n        <Pyramid colour=\"black\" />\n      );\n    case Pieces.WHITE_CUBE:\n      return (\n        <Cube colour=\"white\" />\n      );\n    case Pieces.BLACK_CUBE:\n      return (\n        <Cube colour=\"black\" />\n      );\n    default:\n      return piece;\n  }\n}\n\nconst PrometheusSquare = ({colour, piece, selected, valid, onClick}) => {\n  return (\n    <div className={`square square-${colour} ${selected ? \"square-selected\" : \"\"} ${valid ? \"square-valid\" : \"\"}`} onClick={onClick}>\n      {renderPiece(piece, colour)}\n    </div>\n  )\n}\n\nexport default PrometheusSquare;\n","const Players = {\n  PLAYER_ONE: \"player_one\",\n  PLAYER_TWO: \"player_two\",\n}\n\nexport default Players;\n","import Pieces from \"./Pieces\";\n\nexport const calculateValidMoves = (rank, file, gameState, setValidMoves, playerOneFirstTurn, playerTwoFirstTurn) => {\n  const piece = gameState[rank][file];\n  const movement = movementSpeed(piece);\n  let validMoves = [];\n\n  addValidMoves(rank, file - 1, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // up\n  addValidMoves(rank + 1, file, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // right\n  addValidMoves(rank, file + 1, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // down\n  addValidMoves(rank - 1, file, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // left\n\n  setValidMoves(validMoves);\n}\n\nconst addValidMoves = (x, y, movement, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) => {\n  if (7 < x || x < 0 || 7 < y || y < 0) return;\n\n  if (gameState[x][y] && (playerOneFirstTurn || playerTwoFirstTurn)) return; // Can't take a piece on your first turn\n  if (gameState[x][y] && isPlayerPiece(gameState[x][y], piece)) return; // Abort if hits own piece\n  if (gameState[x][y]) {validMoves.push([x,y]); return;} // Mark valid and abort if hit opponent piece\n  if (movement === 0) {validMoves.push([x,y]); return;} // Final move terminates\n\n  validMoves.push([x,y]);\n\n  addValidMoves(x, y - 1, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // up\n  addValidMoves(x + 1, y, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // right\n  addValidMoves(x, y + 1, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // down\n  addValidMoves(x - 1, y, movement - 1, validMoves, piece, gameState, playerOneFirstTurn, playerTwoFirstTurn) // left\n};\n\nexport const isArrayInArray = (arr, item) => {\n  const item_as_string = JSON.stringify(item);\n\n  return arr.some(function (ele) {\n    return JSON.stringify(ele) === item_as_string;\n  });\n}\n\nconst movementSpeed = (piece) => {\n  switch(piece) {\n    case Pieces.WHITE_SPHERE:\n    case Pieces.BLACK_SPHERE:\n      return 0;\n    case Pieces.WHITE_TETRAHEDRON:\n    case Pieces.BLACK_TETRAHEDRON:\n      return 4;\n    case Pieces.WHITE_PYRAMID:\n    case Pieces.BLACK_PYRAMID:\n      return 5;\n    case Pieces.WHITE_CUBE:\n    case Pieces.BLACK_CUBE:\n      return 8;\n    default:\n      return 0;\n  }\n}\n\nconst isUpper = (str) => {\n  return !/[a-z]/.test(str) && /[A-Z]/.test(str);\n}\n\nconst isPlayerPiece = (str1, str2) => {\n  return isUpper(str1) === isUpper(str2);\n}\n","import React, {useEffect, useState} from 'react';\nimport PrometheusSquare from \"./PrometheusSquare\";\nimport Pieces from \"./Pieces\";\nimport Players from \"./Players\";\nimport {calculateValidMoves, isArrayInArray} from \"./utils\";\n\nconst PrometheusBoard = (\n    {\n      inProgress,\n      setInProgress,\n      playerOneSpherePlaced,\n      playerTwoSpherePlaced,\n      setPlayerOneSpherePlaced,\n      setPlayerTwoSpherePlaced,\n      gameState,\n      setGameState,\n      turn,\n      setTurn,\n      setWinner\n    }\n  ) => {\n\n  const [originRank, setOriginRank] = useState(null);\n  const [originFile, setOriginFile] = useState(null);\n  const [playerOneFirstTurn, setPlayerOneFirstTurn] = useState(true);\n  const [playerTwoFirstTurn, setPlayerTwoFirstTurn] = useState(true);\n  const [validMoves, setValidMoves] = useState([]);\n\n  useEffect(() => {\n    setPlayerOneFirstTurn(true);\n    setPlayerTwoFirstTurn(true);\n  }, [inProgress])\n\n  const makeMove = (rank, file) => {\n    !playerOneSpherePlaced\n      ? addPlayerOneSphere(rank, file)\n      : !playerTwoSpherePlaced\n        ? addPlayerTwoSphere(rank, file)\n        : originRank === null && originFile === null\n          ? selectCandidatePiece(rank, file)\n          : (originRank === rank && originFile === file)\n            ? clearCandidatePiece()\n            : movePiece(rank, file)\n  }\n\n  const addPlayerOneSphere = (rank, file) => {\n    // Sphere has to replace one of Player One's pieces.\n    let selectedSquare = gameState[rank][file];\n    if (selectedSquare && selectedSquare === selectedSquare.toUpperCase()) {\n      let tmp = gameState;\n      tmp[rank][file] = Pieces.WHITE_SPHERE;\n      setGameState(tmp);\n      setPlayerOneSpherePlaced(true);\n    }\n  }\n\n  const addPlayerTwoSphere = (rank, file) => {\n    // Sphere has to replace one of Player Two's pieces.\n    let selectedSquare = gameState[rank][file];\n    if (selectedSquare && selectedSquare === selectedSquare.toLowerCase()) {\n      let tmp = gameState;\n      tmp[rank][file] = Pieces.BLACK_SPHERE;\n      setGameState(tmp);\n      setPlayerTwoSpherePlaced(true);\n    }\n  }\n\n  const selectCandidatePiece = (rank, file) => {\n    let candidatePiece = gameState[rank][file];\n    if ((turn === Players.PLAYER_ONE && candidatePiece && candidatePiece === candidatePiece.toUpperCase())\n      || (turn === Players.PLAYER_TWO && candidatePiece && candidatePiece === candidatePiece.toLowerCase())) {\n      setOriginRank(rank);\n      setOriginFile(file);\n      calculateValidMoves(rank, file, gameState, setValidMoves, playerOneFirstTurn, playerTwoFirstTurn);\n    }\n  };\n\n  const clearCandidatePiece = () => {\n    setOriginRank(null);\n    setOriginFile(null);\n    setValidMoves([]);\n  }\n\n  const movePiece = (destinationRank, destinationFile) => {\n    if (isArrayInArray(validMoves, [destinationRank, destinationFile])) {\n      let tmp = gameState;\n      if (gameState[destinationRank][destinationFile].toUpperCase() === \"S\") {\n        setWinner(turn);\n        setInProgress(false);\n      }\n      if (playerOneFirstTurn && turn === Players.PLAYER_ONE) {\n        setPlayerOneFirstTurn(false)\n      }\n      if (playerTwoFirstTurn && turn === Players.PLAYER_TWO) {\n        setPlayerTwoFirstTurn(false)\n      }\n      tmp[destinationRank][destinationFile] = gameState[originRank][originFile];\n      tmp[originRank][originFile] = \"\"\n      setGameState(tmp);\n      setOriginRank(null);\n      setOriginFile(null);\n      setValidMoves([]);\n      setTurn(turn === Players.PLAYER_ONE ? Players.PLAYER_TWO : Players.PLAYER_ONE)\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      <div className=\"content\">\n        {Array(8).fill(1).map((el, x) => {\n          return (\n            <div id={`rank-${x}`} className=\"board-row flex flex-row\" key={x}>\n              {Array(8).fill(1).map((el, y) => {\n                return (\n                  <PrometheusSquare colour={(x + y) % 2 === 0 ? \"black\" : \"white\"} piece={gameState[x][y]}\n                                    selected={x === originRank && y === originFile} valid={isArrayInArray(validMoves, [x,y])}\n                                    onClick={() => {if(inProgress) makeMove(x, y)}} key={y} />\n                )\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PrometheusBoard;\n","import Pieces from \"./Pieces\";\n\nconst InitialGameState = [\n  [Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE, Pieces.BLACK_CUBE],\n  [Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID, Pieces.BLACK_PYRAMID],\n  [Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON, Pieces.BLACK_TETRAHEDRON],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON, Pieces.WHITE_TETRAHEDRON],\n  [Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID, Pieces.WHITE_PYRAMID],\n  [Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE, Pieces.WHITE_CUBE],\n];\n\nexport default InitialGameState;\n","import React, {useState} from \"react\";\nimport \"./App.css\";\n\nimport PrometheusBoard from \"./PrometheusBoard\";\nimport Players from \"./Players\";\nimport InitialGameState from \"./InitialGameState\";\n\nfunction App() {\n  const [inProgress, setInProgress] = useState(false);\n  const [playerOneSpherePlaced, setPlayerOneSpherePlaced] = useState(false);\n  const [playerTwoSpherePlaced, setPlayerTwoSpherePlaced] = useState(false);\n  // Stringify hack to deep clone InitialGameState - avoids mutation.\n  // TODO: Use lodash here instead?\n  const [gameState, setGameState] = useState(JSON.parse(JSON.stringify(InitialGameState)));\n  const [winner, setWinner] = useState(null);\n  const [turn, setTurn] = useState(Players.PLAYER_ONE);\n\n  const inProgressWithSpheresPlaced = inProgress && playerOneSpherePlaced && playerTwoSpherePlaced;\n\n  const resetGame = () => {\n    setInProgress(true);\n    setWinner(null);\n    setGameState(JSON.parse(JSON.stringify(InitialGameState)));\n    setPlayerOneSpherePlaced(false);\n    setPlayerTwoSpherePlaced(false);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"mb-4\">Prometheus Concept</h1>\n      <PrometheusBoard inProgress={inProgress} setInProgress={setInProgress} playerOneSpherePlaced={playerOneSpherePlaced} playerTwoSpherePlaced={playerTwoSpherePlaced}\n                       setPlayerOneSpherePlaced={setPlayerOneSpherePlaced} setPlayerTwoSpherePlaced={setPlayerTwoSpherePlaced}\n                       gameState={gameState} setGameState={setGameState} turn={turn} setTurn={setTurn} setWinner={setWinner} />\n      <div className=\"below-board-container mt-4\" >\n        {winner && (\n          <span>{winner === Players.PLAYER_ONE ? \"Player One\" : \"Player Two\"} won!</span>\n        )}\n        {inProgress && !playerOneSpherePlaced && (\n          <span>Place Player One's sphere.</span>\n        )}\n        {inProgress && playerOneSpherePlaced && !playerTwoSpherePlaced && (\n          <span>Place Player Two's sphere.</span>\n        )}\n        {inProgressWithSpheresPlaced && (\n          <span>{turn === Players.PLAYER_ONE ? \"White\" : \"Black\"}'s turn.</span>\n        )}\n        {!inProgress && (\n          <button className=\"block m-auto mt-4 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n                  onClick={() => resetGame()}>\n            {winner ? \"Play again?\" : \"Start!\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}